---
const items = [
  "useClickAway",
  "useQuery",
  "useOnce",
  "useMap",
  "useDefault",
  "useFavicon",
  "useTool",
  "useTitle",
  "useToggle",
  "useTimeout",
  "useThrottle",
  "useThousand",
  "useThousand",
  "useThousand",
  "useTheme",
  "useThrottleFn",
  "useThousand",
  "useThousand",
  "useThousand",
  "useThousand",
  "useThousand",
  "useClickAway",
  "useQuery",
  "useOnce",
  "useMap",
  "useDefault",
  "useFavicon",
  "useTool",
  "useTitle",
  "useToggle",
  "useTimeout",
  "useThrottle",
  "useThousand",
  "useThousand",
  "useThousand",
  "useTheme",
  "useThrottleFn",
  "useThousand",
  "useThousand",
  "useThousand",
  "useThousand",
  "useThousand",
];
---

<div
  class="px-4 py-16 max-w-[1440px] mx-auto flex flex-col gap-8"
  id="scroll-items"
>
  <div class="w-full overflow-hidden flex flex-unwrap">
    <ul class="flex items-center gap-4 animate-scrollLoop hover:animate-pause">
      {
        items
          .filter((_, i) => i % 2 !== 0)
          .map((item) => (
            <li class="cursor-pointer inline-block p-1 px-2 rounded-md bg-sky-700 border-b-4 border-sky-400">
              <a href={`/hooks/${item}`}>{item}</a>
            </li>
          ))
      }
    </ul>
    <ul
      class="flex items-center w-full overflow-hidden gap-4 animate-scrollLoop"
    >
      {
        items
          .filter((_, i) => i % 2 !== 0)
          .map((item) => (
            <li class="cursor-pointer inline-block p-1 px-2 rounded-md bg-sky-700 border-b-4 border-sky-400">
              <a href={`/hooks/${item}`}>{item}</a>
            </li>
          ))
      }
    </ul>
  </div>

  <div class="w-full overflow-hidden flex flex-unwrap">
    <ul
      class="flex items-center gap-4 animate-scrollLoop animate-reverse hover:animate-pause"
    >
      {
        items
          .reverse()
          .filter((_, i) => i % 2 === 0)
          .map((item) => (
            <li class="cursor-pointer inline-block p-1 px-2 rounded-md bg-sky-700 border-b-4 border-sky-400">
              <a href={`/hooks/${item}`}>{item}</a>
            </li>
          ))
      }
    </ul>
    <ul
      class="flex items-center w-full overflow-hidden gap-4 animate-reverse animate-scrollLoop"
    >
      {
        items
          .reverse()
          .filter((_, i) => i % 2 === 0)
          .map((item) => (
            <li class="cursor-pointer inline-block p-1 px-2 rounded-md bg-sky-700 border-b-4 border-sky-400">
              <a href={`/hooks/${item}`}>{item}</a>
            </li>
          ))
      }
    </ul>
  </div>
</div>

<script>
  import { request } from "~/utils/request";
  const items = document.querySelectorAll(
    "#scroll-items .animate-scrollLoop li"
  );
  const tooltips: HTMLDivElement[] = [];
  let isLoading = false;
  let isErrored = false;

  items.forEach((item) => {
    item.addEventListener("mouseenter", async (event) => {
      if (isLoading) return;
      try {
        isLoading = true;
        const { description } = await request(`/api/hookDescription/${item.textContent?.trim()}`);
        const x = (event as MouseEvent).clientX;
        const y = (event as MouseEvent).clientY;
        const tooltip = document.createElement("div");
        tooltip.className = "fixed p-2 bg-sky-800 text-white rounded-md r-temp-tooltip";
        tooltip.style.setProperty('--left', `${window.innerWidth - x < 400 ? "92%" : "50%"}`)
        tooltip.style.left = `${window.innerWidth - x < 400 ? x - 200 : x - 100}px`;
        tooltip.style.bottom = `${window.innerHeight - y + 20}px`;
        tooltip.style.zIndex = "9999";
        tooltip.style.maxWidth = "200px";
        tooltip.textContent = description;
        document.body.appendChild(tooltip);
        tooltips.push(tooltip);
        isErrored = false;
      } catch (error) {
        console.log("get description error: ", error);
        isErrored = true;
      } finally {
        setTimeout(() => {
          isLoading = false;
        }, 3000)
      }
    });
    item.addEventListener("mousemove", (event) => {
      if(isErrored) return;
      // get the position of the mouse cursor
      const x = (event as MouseEvent).clientX;
      const y = (event as MouseEvent).clientY;
      const tooltip = tooltips[tooltips.length - 1];
      if(!tooltip) return;
      tooltip.style.left = `${window.innerWidth - x < 400 ? x - 200 : x - 100}px`;
      tooltip.style.bottom = `${window.innerHeight - y + 20}px`;
    });
    item.addEventListener("mouseleave", () => {
      tooltips.forEach((tooltip) => {
        tooltip.remove();
      });
      tooltips.length = 0;
      isErrored = false;
      isLoading = false;
    });
  });
</script>

<style is:global>
.r-temp-tooltip::after {
  content: "";
  position: absolute;
  top: 100%;
  left: var(--left);
  margin-left: -8px;
  border-width: 8px;
  border-style: solid;
  border-color: rgb(7 89 133) transparent transparent transparent;
}
</style>
